package com.shanshixingyu.customgreendao.db.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shanshixingyu.customgreendao.db.bean.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTE.
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'AUTHOR' TEXT NOT NULL ," + // 2: author
                "'TIME' INTEGER);"); // 3: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }
    
    /** ALTER database table. */
    public static void upgradeTable(SQLiteDatabase db, boolean ifExists) {
    	Cursor c=null;
	    int count=0;
        String constraint = "";
        String sql = "SELECT COUNT(*) as count FROM sqlite_master WHERE TYPE='table' AND NAME='NOTE'";
        count=0;
        try {
			c=db.rawQuery(sql,null);
	    	if(null != c && c.moveToFirst()){
	    		count=c.getInt(c.getColumnIndex("count"));
	    	}
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if(c!=null){
				c.close();
				c = null;
			}
		}
		if(count == 0){
			createTable(db, ifExists);
			return;
		}
		
    	
	    
	    db.beginTransaction();
	    boolean errorTag = false;
	    try{
	    String querySql = null;
	    String alertSql = null;
	    	count=0;
	    	if(!errorTag){
		    	querySql="SELECT COUNT(*) as count FROM sqlite_master WHERE tbl_name='NOTE' AND [sql] LIKE '%''ID''%' ";
		    	Cursor cID = null;
		    	try{
			    	cID = db.rawQuery(querySql,null);
			    	if(cID.moveToFirst()){
			    		count=cID.getInt(cID.getColumnIndex("count"));
			    	}
			    	if(count == 0){
						alertSql = "ALTER TABLE "+constraint +"NOTE ADD COLUMN 'ID' INTEGER";
			        	db.execSQL(alertSql);
					}
		    	}catch (Exception e) {
					e.printStackTrace();
					errorTag = true;
				}finally{
					if(cID!=null){
						cID.close();
						cID = null;
					}
				}
				
	    	}
	    	count=0;
	    	if(!errorTag){
		    	querySql="SELECT COUNT(*) as count FROM sqlite_master WHERE tbl_name='NOTE' AND [sql] LIKE '%''NAME''%' ";
		    	Cursor cNAME = null;
		    	try{
			    	cNAME = db.rawQuery(querySql,null);
			    	if(cNAME.moveToFirst()){
			    		count=cNAME.getInt(cNAME.getColumnIndex("count"));
			    	}
			    	if(count == 0){
						alertSql = "ALTER TABLE "+constraint +"NOTE ADD COLUMN 'NAME' TEXT";
			        	db.execSQL(alertSql);
					}
		    	}catch (Exception e) {
					e.printStackTrace();
					errorTag = true;
				}finally{
					if(cNAME!=null){
						cNAME.close();
						cNAME = null;
					}
				}
				
	    	}
	    	count=0;
	    	if(!errorTag){
		    	querySql="SELECT COUNT(*) as count FROM sqlite_master WHERE tbl_name='NOTE' AND [sql] LIKE '%''AUTHOR''%' ";
		    	Cursor cAUTHOR = null;
		    	try{
			    	cAUTHOR = db.rawQuery(querySql,null);
			    	if(cAUTHOR.moveToFirst()){
			    		count=cAUTHOR.getInt(cAUTHOR.getColumnIndex("count"));
			    	}
			    	if(count == 0){
						alertSql = "ALTER TABLE "+constraint +"NOTE ADD COLUMN 'AUTHOR' TEXT";
			        	db.execSQL(alertSql);
					}
		    	}catch (Exception e) {
					e.printStackTrace();
					errorTag = true;
				}finally{
					if(cAUTHOR!=null){
						cAUTHOR.close();
						cAUTHOR = null;
					}
				}
				
	    	}
	    	count=0;
	    	if(!errorTag){
		    	querySql="SELECT COUNT(*) as count FROM sqlite_master WHERE tbl_name='NOTE' AND [sql] LIKE '%''TIME''%' ";
		    	Cursor cTIME = null;
		    	try{
			    	cTIME = db.rawQuery(querySql,null);
			    	if(cTIME.moveToFirst()){
			    		count=cTIME.getInt(cTIME.getColumnIndex("count"));
			    	}
			    	if(count == 0){
						alertSql = "ALTER TABLE "+constraint +"NOTE ADD COLUMN 'TIME' INTEGER";
			        	db.execSQL(alertSql);
					}
		    	}catch (Exception e) {
					e.printStackTrace();
					errorTag = true;
				}finally{
					if(cTIME!=null){
						cTIME.close();
						cTIME = null;
					}
				}
				
	    	}
            db.setTransactionSuccessful();
        }catch (Exception e) {
	    	e.printStackTrace();
	    	errorTag = true;
		}finally{
			db.endTransaction();
			if(errorTag){
				dropTable(db,ifExists);
				createTable(db, ifExists);
			}
		}
		
		
        
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAuthor());
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAuthor(cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
